/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	clients/inst_reiplauto.ycp
 * Package:	Automatic configuration of reipl
 * Summary:	Main file
 * Authors:	Mark Hamzy <hamzy@us.ibm.com>
 *
 * $Id$
 *
 * Main file for reipl configuration. Uses all other files.
 */

{

    /***
     * <h3>Configuration of reipl</h3>
     */

    textdomain "reipl";

    import "Reipl";
    import "GetInstArgs";
    import "Mode";
    import "Wizard";
    import "FileUtils";
    import "Confirm";
    import "Storage";
    /* The main () */
    y2milestone ("----------------------------------------");
    y2milestone ("inst_reiplauto started");

    if (!Reipl::SanityCheck ()) {
	y2milestone ("SanityCheck failed!");
	return `cancel;
    }

    map args = GetInstArgs::argmap ();

    if (args["first_run"]:"yes" != "no") {
	args["first_run"] = "yes";
    }

    if (Mode::mode () == "firstboot") {
	Wizard::HideAbortButton ();
    }

    boolean rc = true;

    map <string, any> oldConfiguration = Reipl::ReadState ();
    map <string, any> newConfiguration = nil;

    if (oldConfiguration != nil) {
	newConfiguration = Reipl::ModifyReiplWithBootPartition (oldConfiguration);

	if (newConfiguration != nil) {
	    Reipl::WriteState (newConfiguration);
	}
	else {
	    y2error ("Could not modify reipl configuration");
	}
    }
    else {
	y2error ("Could not read reipl configuration");
    }

    /* Finish */
    y2milestone("inst_reiplauto finished");
    y2milestone("----------------------------------------");

    return `next;

/* EOF */
}
